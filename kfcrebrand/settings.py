"""
Django settings for kfcrebrand project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import datetime
import os
from dotenv import load_dotenv
from pathlib import Path
import tldextract


# stolen from distutil, as distutil is deprecated in py3.10
def strtobool(val):
    """Convert a string representation of truth to true (1) or false (0).
    True values are 'y', 'yes', 't', 'true', 'on', and '1'; false values
    are 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if
    'val' is anything else.
    """
    val = val.lower()
    if val in ('y', 'yes', 't', 'true', 'on', '1'):
        return 1
    elif val in ('n', 'no', 'f', 'false', 'off', '0'):
        return 0
    else:
        raise ValueError("invalid truth value %r" % (val,))


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(BASE_DIR.joinpath(".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", 'django-insecure-u0r#lj965$_#(q18ld)bc8&3j^bs#bdfvje9k4!w#f)3bps*ip')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = strtobool(os.environ.get("DJANGO_DEBUG", "false"))

_allowed_schemes: list = os.environ.get("ALLOWED_SCHEMES", "https").split(",")
_frontend_domain: str = os.environ.get("FRONTEND_DOMAIN", "vps.5wc.stagec.xyz")
_parsed_frontend_domain = tldextract.extract(_frontend_domain)
_allowed_hosts: list = os.environ.get("ALLOWED_HOSTS", _frontend_domain).split(",")
_allowed_ports: list[int] = list(map(int, os.environ.get("ALLOWED_PORTS", "443").split(",")))

ALLOWED_HOSTS = _allowed_hosts + ['.localhost', '127.0.0.1', '[::1]']

_default_ports = [80, 443]  # ugly hack........... i dont even anymore
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [(f"{scheme}://{hostname}"
                         f"{':' if port not in _default_ports else ''}"
                         f"{port if port not in _default_ports else ''}")
                        for scheme in _allowed_schemes
                        for hostname in ALLOWED_HOSTS
                        for port in _allowed_ports]
CSRF_TRUSTED_ORIGINS = ([f"{scheme}://*.{hostname}:{port}"
                         for scheme in _allowed_schemes
                         for hostname in ALLOWED_HOSTS
                         for port in _allowed_ports] +
                        [(f"{scheme}://{hostname}"
                          f"{':' if port not in _default_ports else ''}"
                          f"{port if port not in _default_ports else ''}")
                         for scheme in _allowed_schemes
                         for hostname in ALLOWED_HOSTS
                         for port in _allowed_ports])
CSRF_COOKIE_DOMAIN = f".{_parsed_frontend_domain.registered_domain}"
SESSION_COOKIE_DOMAIN = f".{_parsed_frontend_domain.registered_domain}"

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'daphne',
    'discord',
    'userauth',
    'teammgmt',
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework'
]

AUTHENTICATION_BACKENDS = [
    'userauth.authentication.DiscordAndOsuAuthBackend',
    "django.contrib.auth.backends.ModelBackend"
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'kfcrebrand.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'kfcrebrand.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'test_local': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    },
    'default': {
        # 'ENGINE': 'django.db.backends.mysql',
        'ENGINE': 'django_psdb_engine',
        'NAME': os.environ.get('DB_NAME'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': os.environ.get('DB_PORT'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'OPTIONS': {'ssl': {'ca': os.environ.get('MYSQL_ATTR_SSL_CA')}}
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": [
            # "redis://127.0.0.1:6379/0",
            "redis://redis:6379/0"
        ],
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
}

ASGI_APPLICATION = 'kfcrebrand.asgi.application'
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [
                (os.environ.get("REDIS_HOST", "127.0.0.1"), int(os.environ.get("REDIS_PORT", "6379"))),
            ],
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [  # default includes session and basic auth. we don't want basic auth.
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PAGINATION_CLASS': 'kfcrebrand.pagination.PageNumberWithLimitPagination',
    'PAGE_SIZE': 50
}

DISCORD_API_ENDPOINT = 'https://discord.com/api/v10'
DISCORD_CLIENT_ID = os.environ.get("DISCORD_CLIENT_ID", None)
DISCORD_CLIENT_SECRET = os.environ.get("DISCORD_CLIENT_SECRET", None)
DISCORD_REDIRECT_URI_SUFFIX = "/auth/discord/discord_code"
DISCORD_PSK = os.environ.get("DISCORD_PSK", "DONOTUSEINPRODUCTIONDONOTUSEINPRODUCTIONDONOTUSEINPRODUCTION")
CHANNELS_DISCORD_WS_GROUP_NAME = "5wc_discord_signups"

OSU_API_ENDPOINT = "https://osu.ppy.sh/api/v2"
OSU_OAUTH_ENDPOINT = "https://osu.ppy.sh/oauth"
OSU_CLIENT_ID = os.environ.get("OSU_CLIENT_ID", None)
OSU_CLIENT_SECRET = os.environ.get("OSU_CLIENT_SECRET", None)
OSU_REDIRECT_URI_SUFFIX = "/auth/osu/code"

TEAM_ROSTER_SIZE_MIN = int(os.environ.get("TEAM_ROSTER_SIZE_MIN", 6))  # fatal if not parseable
TEAM_ROSTER_SIZE_MAX = int(os.environ.get("TEAM_ROSTER_SIZE_MAX", 8))
TEAM_ROSTER_BACKUP_SIZE_MAX = int(os.environ.get("TEAM_ROSTER_BACKUP_SIZE_MAX", 3))
TEAM_ROSTER_REGISTRATION_START = datetime.datetime.fromtimestamp(
    int(os.environ.get("REGISTRATION_START", 1705946400)),
    tz=datetime.timezone.utc
)
USER_REGISTRATION_END = datetime.datetime.fromtimestamp(
    int(os.environ.get("REGISTRATION_END", 1707696000)),
    tz=datetime.timezone.utc
)
TEAM_ROSTER_SELECTION_END = datetime.datetime.fromtimestamp(
    int(os.environ.get("ROSTER_SELECTION_END", 1708214400)),
    tz=datetime.timezone.utc
)

# CELERY_BACKEND_URL = 'redis://localhost:6379/0'  # not needed now... may need to re-enable it for chains/groups
CELERY_BROKER_URL = 'redis://redis:6379/0;redis://127.0.0.1:6379/0'
